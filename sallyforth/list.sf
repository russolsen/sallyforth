/ Index into the x'th item.

: [x]  { 1 ->list '__getitem__ .!! }

: first  { 0 [x] } ->compile
: second { 1 [x] } ->compile
: third  { 2 [x] } ->compile
: fourth { 3 [x] } ->compile

: last { -1 [x] } ->compile

: slice  {
  swap
  2 ->list
  builtins/slice
  !!
} ->compile

: take  {
  swap 0 swap slice                 / Make the 0..n slice.
  [x]                               / Do a[0..n].
} ->compile
 
: skip  {
  swap nil slice                    / Make the n..None slice.
  [x]
} ->compile

: n-of  {
  1 ->list * 
} ->compile

: len { builtins/len !!1 }

: empty? { len zero? }
  
: rest   { 1 swap skip }    ->compile
: rrest  { rest rest }      ->compile
: rrrest { rest rest rest } ->compile

: ffirst  { first first }       ->compile
: fffirst { first first first } ->compile

: append  {
  dup tbm 
  <. $? 'append .> !!1
  drop
} ->compile

/ Execute a native function in a list.

: [! [
: !] { ] dup rest swap first !! } ->compile


