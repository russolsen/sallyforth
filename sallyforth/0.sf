/ Pull in libs.

"builtins" load
"time" load
"math" load
"sys" load
"os" load
"os.path" load
"io" load
"time" load
'builtins import
'time import

/ Basic aliases

: ->compile  { *last-word* compile }
: ->inline   { *last-word* inline }
: ->optimize { ->inline ->compile }
: ->static   { false *last-word* dynamic }
: ->dynamic  { true *last-word* dynamic }


: -- { 1 - }           ->compile
: ++ { 1 + }           ->compile
: =0 { 0 = }           ->compile
: pos?  { 0 > }        ->compile
: neg?  { 0 < }        ->compile
: zero? { 0 = }        ->compile
: drop1 { drop }       ->compile
: drop2 { drop drop }  ->compile
: drop3 { drop2 drop } ->compile

/ List making.

unique 'list-marker =!
: [ list-marker             ->compile
: ] { list-marker [list] }  ->compile
: [] { [ ] }                ->compile

unique 'map-marker =!

: <<= /Start a map/ map-marker ->compile

: =>> /Complete a map/ {
  map-marker [list] list->map 
} ->compile

: <<=>> /Push an empty map/ { <<= =>> } ->compile


/ Spelunk thru objects and properties.

: <. [
: .> { ] @@ }
: $? swap


/ Function calling.

: !!0 /Call a 0 arg native function/ { [] swap !! }
: !!1 /Call a 1 arg native function/ { swap 1 ->list swap !! }
: !!2 /Call a 2 arg native function/ { mbt 2 ->list swap !! }

/ obj attr -- attr-value 
: getattr  {
  swap 2 ->list builtins/getattr !! 
}

/ obj attr value
: setattr {
  bmt 3 ->list builtins/setattr
}

/ obj args method-name -- result
: .!! {
  tbm getattr !!
}

/ Handy utilities

: str { builtins/str !!1 }
: type { builtins/type !!1 }
: callable? { builtins/callable !!1 }
: sleep { time/sleep !!1 drop }
: ctime { time/ctime !!0 }
: now { time/time !!0 }

/ Set the interactive prompt.

: *prompt* { <. *ns* 'name .> str " sf>> " + }

/ bool msg --
: assert {
  dup
  p
  swap
  ifelse
  { drop "OK " p }
  { builtins/AssertionError !!1 raise }
}

/ Namespaces

: namespaces { <. forth 'namespaces .> }

: namespace { 
  dup ns? ifelse
  { stack set-ns }
  { dup new-ns set-ns }
}

: require {
  dup dup
  '.sf + source
  ns? not ifelse { "Namespace " .  . " not loaded." p }
                 { "Namespace " .  . " loaded." p }  
}

/ Time execution

: time[ { now }
: ]time { now swap - }
  
/ Documentation

: ->doc { *last-word* setdoc }
: __doc__ { <. $? '__doc__ .> }

/ Other startup files.

*sallyforth-dir* "/"  "io.sf"     + + source
*sallyforth-dir* "/"  "list.sf"   + + source
*sallyforth-dir* "/"  "string.sf" + + source
